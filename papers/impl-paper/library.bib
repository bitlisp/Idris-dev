Automatically generated by Mendeley 1.3.1
Any changes to this file will be lost if it is regenerated by Mendeley.

@book{Chlipala2012,
author = {Chlipala, Adam},
file = {:Users/edwin/Documents/Mendeley Desktop/Chlipala/Unknown/Chlipala - 2012 - Certified Programming with Dependent Types.pdf:pdf},
title = {{Certified Programming with Dependent Types}},
year = {2012}
}
@inproceedings{czarnecki2004dsl,
author = {Czarnecki, K. and Oâ€™Donnell, J. and Striegnitz, J. and Taha, W.},
booktitle = {Domain-Specific Program Generation},
file = {:Users/edwin/Documents/Mendeley Desktop/Czarnecki et al/Domain-Specific Program Generation/Czarnecki et al. - 2004 - DSL implementation in MetaOCaml, Template Haskell, and C.pdf:pdf},
pages = {51--72},
publisher = {Springer},
title = {{DSL implementation in MetaOCaml, Template Haskell, and C++}},
url = {http://www.springerlink.com/index/NL620EL7N94M161H.pdf},
year = {2004}
}
@phdthesis{Brady2005,
author = {Brady, Edwin},
file = {:Users/edwin/Documents/Mendeley Desktop/Brady/Unknown/Brady - 2005 - Practical Implementation of a Dependently Typed Functional Programming Language.pdf:pdf},
keywords = {Dependent Types},
mendeley-tags = {Dependent Types},
school = {University of Durham},
title = {{Practical Implementation of a Dependently Typed Functional Programming Language}},
url = {http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.150.8284&rep=rep1&type=pdf},
year = {2005}
}
@inproceedings{Kimmell2012,
author = {Kimmell, G and Stump, A and {Eades III}, HD and Fu, Peng and Sheard, Tim and Weirich, S and Casinghino, C and Sj\"{o}berg, V and Collins, N and Ahn, KY},
booktitle = {Programming Languages meets Program Verification},
file = {:Users/edwin/Documents/Mendeley Desktop/Kimmell et al/Programming Languages meets Program Verification/Kimmell et al. - 2012 - Equational reasoning about programs with general recursion and call-by-value semantics.pdf:pdf},
title = {{Equational reasoning about programs with general recursion and call-by-value semantics}},
url = {http://dl.acm.org/citation.cfm?id=2103780},
year = {2012}
}
@article{Epstein2011,
author = {Epstein, Jeff and Black, Andrew P and Peyton-jones, Simon},
institution = {Microsoft Research},
journal = {researchmicrosoftcom},
number = {Section 8},
pages = {1--12},
title = {{Haskell for the cloud}},
url = {http://research.microsoft.com/en-us/um/people/simonpj/papers/parallel/remote.pdf},
year = {2011}
}
@article{Altenkirch2010a,
abstract = {We begin by revisiting the idea of using a universe of types to write generic programs in a dependently typed setting by constructing a universe for Strictly Positive Types (SPTs). Here we extend this construction to cover dependent types, i.e. Strictly Positive Families (SPFs), thereby fixing a gap left open in previous work. Using the approach presented here we are able to represent all of Epigrams datatypes within Epigram including the universe of datatypes itself.},
author = {Altenkirch, Thorsten and Mcbride, Conor and Morris, Peter},
file = {:Users/edwin/Documents/Mendeley Desktop/Altenkirch, Mcbride, Morris/Citeseer/Altenkirch, Mcbride, Morris - 2010 - Generic Programming with Dependent Types.pdf:pdf},
journal = {Citeseer},
publisher = {Citeseer},
title = {{Generic Programming with Dependent Types}},
url = {http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.129.2926&amp;rep=rep1&amp;type=pdf},
year = {2010}
}
@article{fisher2006next,
author = {Fisher, K. and Mandelbaum, Y. and Walker, D.},
file = {:Users/edwin/Documents/Mendeley Desktop/Fisher, Mandelbaum, Walker/Journal of the ACM/Fisher, Mandelbaum, Walker - 2010 - The next 700 data description languages.pdf:pdf},
journal = {Journal of the ACM},
number = {2},
pages = {1--51},
publisher = {ACM},
title = {{The next 700 data description languages}},
url = {http://dl.acm.org/citation.cfm?id=1111039},
volume = {15},
year = {2010}
}
@misc{The2012b,
author = {Brooks, Fred},
doi = {10.1093/epirev/mxr031},
file = {:Users/edwin/Documents/Mendeley Desktop/Brooks/Unknown/Brooks - Unknown - The Design of Design Chapter 1.pdf:pdf},
isbn = {9780321702081},
issn = {1478-6729},
pmid = {22215642},
title = {{The Design of Design Chapter 1}}
}
@article{Chapman2005epigram,
author = {Chapman, James and Altenkirch, Thorsten and McBride, Conor},
file = {:Users/edwin/Documents/Mendeley Desktop/Chapman, Altenkirch, McBride/Trends in Functional Programming/Chapman, Altenkirch, McBride - 2005 - Epigram Reloaded A Standalone Typechecker for {ETT}.pdf:pdf},
journal = {Trends in Functional Programming},
publisher = {Intellect Books},
title = {{Epigram Reloaded: A Standalone Typechecker for {ETT}}},
url = {http://books.google.co.uk/books?hl=en&amp;lr=&amp;id=p0yV1sHLubcC&amp;oi=fnd&amp;pg=PA79&amp;dq=epigram+reloaded&amp;ots=x50ou0VMsm&amp;sig=7TjAGohIatNLTWsHcuNcK5hEGGY},
year = {2005}
}
@misc{TheMendeleySupportTeam2011,
abstract = {A quick introduction to Mendeley. Learn how Mendeley creates your personal digital library, how to organize and annotate documents, how to collaborate and share with colleagues, and how to generate citations and bibliographies.},
address = {London},
author = {{The Mendeley Support Team}},
booktitle = {Mendeley Desktop},
file = {:Users/edwin/Documents/Mendeley Desktop/The Mendeley Support Team/Mendeley Desktop/The Mendeley Support Team - 2011 - Getting Started with Mendeley.pdf:pdf},
keywords = {Mendeley,how-to,user manual},
pages = {1--16},
publisher = {Mendeley Ltd.},
title = {{Getting Started with Mendeley}},
url = {http://www.mendeley.com},
year = {2011}
}
@phdthesis{Okasaki1996,
author = {Okasaki, Chris},
file = {:Users/edwin/Documents/Mendeley Desktop/Okasaki/Unknown/Okasaki - 1996 - Purely Functional Data Structures.pdf:pdf},
school = {Carnegie Mellon University},
title = {{Purely Functional Data Structures}},
year = {1996}
}
@article{mcbride2008functional,
author = {McBride, C. and Paterson, R.},
file = {:Users/edwin/Documents/Mendeley Desktop/McBride, Paterson/Journal of functional programming/McBride, Paterson - 2008 - Functional pearl Applicative programming with effects.pdf:pdf},
journal = {Journal of functional programming},
number = {1},
pages = {1--13},
publisher = {Cambridge Univ Press},
title = {{Functional pearl: Applicative programming with effects}},
url = {http://journals.cambridge.org/production/action/cjoGetFulltext?fulltextid=1457860},
volume = {18},
year = {2008}
}
@inproceedings{madhavapeddy2007melange,
author = {Madhavapeddy, A. and Ho, A. and Deegan, T. and Scott, D. and Sohan, R.},
booktitle = {ACM SIGOPS Operating Systems Review},
file = {:Users/edwin/Documents/Mendeley Desktop/Madhavapeddy et al/ACM SIGOPS Operating Systems Review/Madhavapeddy et al. - 2007 - Melange creating a functional internet.pdf:pdf},
number = {3},
pages = {101--114},
publisher = {ACM},
title = {{Melange: creating a functional internet}},
url = {http://dl.acm.org/citation.cfm?id=1273009},
volume = {41},
year = {2007}
}
@inproceedings{lempsink2009type,
author = {Lempsink, E. and Leather, S. and L\"{o}h, A.},
booktitle = {Proceedings of the 2009 ACM SIGPLAN workshop on Generic programming},
file = {:Users/edwin/Documents/Mendeley Desktop/Lempsink, Leather, L\"{o}h/Proceedings of the 2009 ACM SIGPLAN workshop on Generic programming/Lempsink, Leather, L\"{o}h - 2009 - Type-safe diff for families of datatypes.pdf:pdf},
pages = {61--72},
publisher = {ACM},
title = {{Type-safe diff for families of datatypes}},
url = {http://dl.acm.org/citation.cfm?id=1596624},
year = {2009}
}
@book{Approach2012,
author = {Hunt, Andrew and Thomas, David},
booktitle = {Carcinogenesis},
doi = {10.1093/carcin/bgs054},
file = {:Users/edwin/Documents/Mendeley Desktop/Hunt, Thomas/Carcinogenesis/Hunt, Thomas - Unknown - The Pragmatic Programmer Chapter 2.pdf:pdf},
isbn = {020161622X},
issn = {1460-2180},
number = {3},
pmid = {22383472},
title = {{The Pragmatic Programmer Chapter 2}},
url = {http://www.ncbi.nlm.nih.gov/pubmed/22383472},
volume = {33}
}
@inproceedings{stump2010resource,
author = {Stump, A. and Austin, E.},
booktitle = {Proceedings of the 4th ACM SIGPLAN workshop on Programming languages meets program verification},
file = {:Users/edwin/Documents/Mendeley Desktop/Stump, Austin/Proceedings of the 4th ACM SIGPLAN workshop on Programming languages meets program verification/Stump, Austin - 2010 - Resource typing in Guru.pdf:pdf},
pages = {27--38},
publisher = {ACM},
title = {{Resource typing in Guru}},
url = {http://dl.acm.org/citation.cfm?id=1707796},
year = {2010}
}
@article{mcbride2010ornamental,
author = {McBride, Conor},
file = {:Users/edwin/Documents/Mendeley Desktop/McBride/Journal of Functional Programming/McBride - 2010 - Ornamental algebras, algebraic ornaments.pdf:pdf},
journal = {Journal of Functional Programming},
title = {{Ornamental algebras, algebraic ornaments}},
url = {http://personal.cis.strath.ac.uk/$\sim$conor/pub/OAAO/Ornament.pdf},
year = {2010}
}
@article{Swierstra2011,
author = {Swierstra, W},
file = {:Users/edwin/Documents/Mendeley Desktop/Swierstra/Journal of Functional Programming/Swierstra - 2011 - Sorted Verifying the Problem of the {Dutch National} Flag in {Agda}.pdf:pdf},
journal = {Journal of Functional Programming},
number = {6},
pages = {575----583},
title = {{Sorted: Verifying the Problem of the {Dutch National} Flag in {Agda}}},
url = {http://journals.cambridge.org/abstract_S0956796811000207},
volume = {21},
year = {2011}
}
@article{McBride2002,
author = {McBride, C},
file = {:Users/edwin/Documents/Mendeley Desktop/McBride/Types for proofs and programs ({TYPES 2000})/McBride - 2000 - Elimination with a Motive.pdf:pdf},
journal = {Types for proofs and programs ({TYPES 2000})},
title = {{Elimination with a Motive}},
url = {http://www.springerlink.com/index/vbpg19305t46f6dm.pdf},
year = {2000}
}
@article{Xi1998,
abstract = {We present a type-based approach to eliminating array bound checking and list tag checking by conservatively extending Standard ML with a restricted form of dependent types. This enables the programmer to capture more invariants through types while type-checking remains decidable in theory and can still be performed efficiently in practice. We illustrate our approach through concrete examples and present the result of our preliminary experiments which support support the feasibility and effectiveness of our approach.},
author = {Xi, Hongwei and Pfenning, Frank},
doi = {10.1145/277652.277732},
file = {:Users/edwin/Documents/Mendeley Desktop/Xi, Pfenning/ACM Sigplan Notices/Xi, Pfenning - 1998 - Eliminating array bound checking through dependent types.pdf:pdf},
isbn = {0897919874},
issn = {03621340},
journal = {ACM Sigplan Notices},
keywords = {Dependent Types},
mendeley-tags = {Dependent Types},
number = {5},
pages = {249--257},
publisher = {ACM},
series = {PLDI '98},
title = {{Eliminating array bound checking through dependent types}},
url = {http://portal.acm.org/citation.cfm?doid=277652.277732},
volume = {33},
year = {1998}
}
@misc{idristutorial,
author = {Brady, Edwin},
file = {:Users/edwin/Documents/Mendeley Desktop/Brady/Unknown/Brady - 2012 - Programming in Idris a tutorial.pdf:pdf},
title = {{Programming in Idris : a tutorial}},
url = {http://idris-lang.org/tutorial},
year = {2012}
}
@book{Cryptography2012,
author = {Anderson, Ross},
doi = {10.1093/intimm/dxs023},
file = {:Users/edwin/Documents/Mendeley Desktop/Anderson/Unknown/Anderson - Unknown - Security Engineering Chapter 5.pdf:pdf},
isbn = {9780470068526},
issn = {1460-2377},
number = {4},
pmid = {22451589},
title = {{Security Engineering Chapter 5}},
url = {http://www.ncbi.nlm.nih.gov/pubmed/22451589},
volume = {24}
}
@inproceedings{NanevskiAAMorrisett2008,
abstract = {We describe an axiomatic extension to the Coq proof assistant, that supports writing, reasoning about, and extracting higher-order, dependently-typed programs with side-effects. Coq already includes a powerful functional language that supports dependent types, but that language is limited to pure, total functions. The key contribution of our extension, which we call Ynot, is the added support for computations that may have effects such as non-termination, accessing a mutable store, and throwing/catching exceptions. The axioms of Ynot form a small trusted computing base which has been formally justified in our previous work on Hoare Type Theory (HTT). We show how these axioms can be combined with the powerful type and abstraction mechanisms of Coq to build higher-level reasoning mechanisms which in turn can be used to build realistic, verified software components. To substantiate this claim, we describe here a representative series of modules that implement imperative finite maps, including support for a higher-order (effectful) iterator. The implementations range from simple (e.g., association lists) to complex (e.g., hash tables) but share a common interface which, abstracts the implementation details and ensures that the modules properly implement the finite map abstraction. Copyright 2008 ACM.},
author = {{Nanevski A A Morrisett}, G B Shinnar A B Govereau P B Birkedal L C},
booktitle = {International Conference on Functional Programming},
doi = {10.1145/1411204.1411237},
file = {:Users/edwin/Documents/Mendeley Desktop/Nanevski A A Morrisett/International Conference on Functional Programming/Nanevski A A Morrisett - 2008 - Ynot Dependent types for imperative programs.pdf:pdf},
isbn = {9781595939197},
issn = {15232867},
keywords = {Dependent Types},
mendeley-tags = {Dependent Types},
number = {9},
pages = {229--240},
title = {{Ynot: Dependent types for imperative programs}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-67650032847&partnerID=40&md5=7a5be3083878399cebafda33b1affa6b},
volume = {43},
year = {2008}
}
@misc{Brady2012c,
author = {Brooks, Fred},
doi = {10.1093/epirev/mxr031},
file = {:Users/edwin/Documents/Mendeley Desktop/Brooks/Unknown/Brooks - Unknown - The Design of Design Chapter 5.pdf:pdf},
isbn = {9780321702081},
issn = {1478-6729},
number = {1},
pages = {NP},
pmid = {22215642},
title = {{The Design of Design Chapter 5}},
volume = {34}
}
@inproceedings{ko2011modularising,
author = {Ko, H.S. and Gibbons, J.},
booktitle = {Proceedings of the seventh ACM SIGPLAN workshop on Generic programming},
file = {:Users/edwin/Documents/Mendeley Desktop/Ko, Gibbons/Proceedings of the seventh ACM SIGPLAN workshop on Generic programming/Ko, Gibbons - 2011 - Modularising inductive families.pdf:pdf},
pages = {13--24},
publisher = {ACM},
title = {{Modularising inductive families}},
url = {http://www.cs.ox.ac.uk/publications/publication5008-abstract.html http://dl.acm.org/citation.cfm?id=2036921},
year = {2011}
}
@book{Choosing2012,
author = {Fowler, Martin},
booktitle = {Carcinogenesis},
doi = {10.1093/carcin/bgs054},
file = {:Users/edwin/Documents/Mendeley Desktop/Fowler/Carcinogenesis/Fowler - Unknown - Domain Specific Languages Chapter 6.pdf:pdf},
isbn = {9780132107549},
issn = {1460-2180},
number = {3},
pmid = {22383472},
title = {{Domain Specific Languages Chapter 6}},
url = {http://www.ncbi.nlm.nih.gov/pubmed/22383472},
volume = {33}
}
@article{marlow2006making,
author = {Marlow, S. and {Peyton Jones}, S.},
file = {:Users/edwin/Documents/Mendeley Desktop/Marlow, Peyton Jones/Journal of Functional Programming/Marlow, Peyton Jones - 2006 - Making a fast curry pushenter vs. evalapply for higher-order languages.pdf:pdf},
journal = {Journal of Functional Programming},
number = {4-5},
pages = {415--449},
publisher = {Cambridge University Press},
title = {{Making a fast curry: push/enter vs. eval/apply for higher-order languages}},
url = {http://dl.acm.org/citation.cfm?id=1166018},
volume = {16},
year = {2006}
}
@article{Mandelbaum2007,
abstract = {Massive amounts of useful data are stored and processed in ad hoc formats for which common tools like parsers, printers, query engines and format converters are not readily available. In this paper, we explain the design and implementation of PADS/ML , a new language and system that facilitates the generation of data processing tools for ad hoc formats. The PADS/ML design includes features such as dependent, polymorphic and recursive datatypes, which allow programmers to describe the syntax and semantics of ad hoc data in a concise, easy-to-read notation. The PADS/ML implementation compiles these descriptions into ml structures and functors that include types for parsed data, functions for parsing and printing, and auxiliary support for user-specified, format-dependent and format-independent tool generation.},
author = {Mandelbaum, Yitzhak and Fisher, Kathleen and Walker, David and Fernandez, Mary and Gleyzer, Artem},
doi = {10.1145/1190215.1190231},
isbn = {1595935754},
issn = {03621340},
journal = {SIGPLAN Not},
number = {1},
pages = {77--83},
publisher = {ACM},
series = {POPL '07},
title = {{PADS/ML: a functional data description language}},
url = {http://doi.acm.org/10.1145/1190216.1190231},
volume = {42},
year = {2007}
}
@article{Abel2010,
abstract = {Sized types are a modular and theoretically well-understood tool for checking termination of recursive and productivity of corecursive definitions. The essential idea is to track structural descent and guardedness in the type system to make termination checking robust and suitable for strong abstractions like higher-order functions and polymorphism. To study the application of sized types to proof assistants and programming languages based on dependent type theory, we have implemented a core language, MiniAgda, with explicit handling of sizes. New considerations were necessary to soundly integrate sized types with dependencies and pattern matching, which was made possible by concepts such as inaccessible patterns and parametric function spaces. This paper provides an introduction to MiniAgda by example and informal explanations of the underlying principles.},
author = {Abel, Andreas},
file = {:Users/edwin/Documents/Mendeley Desktop/Abel/EPTCS/Abel - 2010 - MiniAgda Integrating Sized and Dependent Types.pdf:pdf},
journal = {EPTCS},
pages = {1--15},
title = {{MiniAgda: Integrating Sized and Dependent Types}},
url = {http://arxiv.org/abs/1012.4896},
volume = {43},
year = {2010}
}
@article{Hoare1978,
abstract = {This paper suggests that input and output are basic primitives of programming and that parallel composition of communicating sequential processes is a fundamental program structuring method. When combined with a development of Dijkstra's guarded command, these concepts are surprisingly versatile. Their use is illustrated by sample solutions of a variety of a familiar programming exercises.},
author = {Hoare, C A R},
doi = {10.1016/0167-6423(87)90028-1},
editor = {McKeag, R M and Macnaghten, A M},
file = {:Users/edwin/Documents/Mendeley Desktop/Hoare/Communications of the ACM/Hoare - 1978 - Communicating sequential processes.pdf:pdf},
isbn = {0131532715},
issn = {01676423},
journal = {Communications of the ACM},
number = {8},
pages = {666--677},
pmid = {2142694823583477576},
publisher = {ACM},
series = {International Series in Computer Science},
title = {{Communicating sequential processes}},
url = {http://linkinghub.elsevier.com/retrieve/pii/0167642387900281},
volume = {21},
year = {1978}
}
@book{Bird2010,
author = {Bird, Richard},
file = {:Users/edwin/Documents/Mendeley Desktop/Bird/Unknown/Bird - 2010 - Pearls of Functional Algorithm Design.pdf:pdf},
isbn = {9780521513388},
title = {{Pearls of Functional Algorithm Design}},
year = {2010}
}
@inproceedings{oury2008power,
author = {Oury, N. and Swierstra, W.},
booktitle = {International Conference on Functional Programming},
file = {:Users/edwin/Documents/Mendeley Desktop/Oury, Swierstra/International Conference on Functional Programming/Oury, Swierstra - 2008 - The power of Pi.pdf:pdf},
keywords = {Dependent Types},
mendeley-tags = {Dependent Types},
number = {9},
pages = {39--50},
publisher = {ACM},
title = {{The power of Pi}},
url = {http://dl.acm.org/citation.cfm?id=1411213},
volume = {43},
year = {2008}
}
@inproceedings{madhavapeddy2010turning,
author = {Madhavapeddy, A. and Mortier, R. and Sohan, R. and Gazagnaire, T. and Hand, S. and Deegan, T. and McAuley, D. and Crowcroft, J.},
booktitle = {Proceedings of the 2nd USENIX conference on Hot topics in cloud computing},
file = {:Users/edwin/Documents/Mendeley Desktop/Madhavapeddy et al/Proceedings of the 2nd USENIX conference on Hot topics in cloud computing/Madhavapeddy et al. - 2010 - Turning down the LAMP software specialisation for the cloud.pdf:pdf},
publisher = {USENIX Association},
title = {{Turning down the LAMP: software specialisation for the cloud}},
url = {http://dl.acm.org/citation.cfm?id=1863114},
year = {2010}
}
@book{peyton1987implementation,
author = {{Peyton Jones}, S.L.},
publisher = {Prentice-Hall, Inc.},
title = {{The implementation of functional programming languages (prentice-hall international series in computer science)}},
url = {http://dl.acm.org/citation.cfm?id=1096899},
year = {1987}
}
@inproceedings{Pasalic2002,
author = {Pa\v{s}alic, Emir and Taha, Walid and Sheard, Tim},
booktitle = {International Conference on Functional Programming},
doi = {10.1145/583852.581499},
file = {:Users/edwin/Documents/Mendeley Desktop/Pa\v{s}alic, Taha, Sheard/International Conference on Functional Programming/Pa\v{s}alic, Taha, Sheard - 2002 - Tagless staged interpreters for typed languages.pdf:pdf},
isbn = {1-58113-487-8},
issn = {03621340},
keywords = {calculus of constructions,definitional interpreters,domain-specific languages,multi-stage programming},
month = sep,
number = {9},
pages = {218--229},
title = {{Tagless staged interpreters for typed languages}},
url = {http://dl.acm.org/citation.cfm?id=583852.581499},
volume = {37},
year = {2002}
}
@inproceedings{Brady2010,
author = {Brady, Edwin and Hammond, Kevin},
booktitle = {Proceedings of the 15th ACM SIGPLAN international conference on Functional programming},
file = {:Users/edwin/Documents/Mendeley Desktop/Brady, Hammond/Proceedings of the 15th ACM SIGPLAN international conference on Functional programming/Brady, Hammond - 2010 - Scrapping your inefficient engine using partial evaluation to improve domain-specific language implementation.pdf:pdf},
isbn = {9781605587943},
keywords = {Dependent Types,code generation gives,contrast,dependent types,efficient,harder,however,implementation,likely efficient,ness interpreter,partial evaluation,resulting implementation,un,verify its correctness},
mendeley-tags = {Dependent Types},
pages = {297--308},
publisher = {ACM},
title = {{Scrapping your inefficient engine: using partial evaluation to improve domain-specific language implementation}},
url = {http://portal.acm.org/citation.cfm?id=1863587},
year = {2010}
}
@inproceedings{Fournet2011,
author = {Fournet, Cedric and Bhargavan, Karthikeyan and Gordon, Andrew D},
booktitle = {Foundations of security analysis and design {VI}},
file = {:Users/edwin/Documents/Mendeley Desktop/Fournet, Bhargavan, Gordon/Foundations of security analysis and design {VI}/Fournet, Bhargavan, Gordon - 2010 - Cryptographic verification by typing for a sample protocol implementation.pdf:pdf},
title = {{Cryptographic verification by typing for a sample protocol implementation}},
url = {http://www.springerlink.com/index/V168041M46658R73.pdf},
year = {2010}
}
@article{landin1966next,
author = {Landin, P.J.},
file = {:Users/edwin/Documents/Mendeley Desktop/Landin/Communications of the ACM/Landin - 1966 - The next 700 programming languages.pdf:pdf},
journal = {Communications of the ACM},
number = {3},
pages = {157--166},
publisher = {ACM},
title = {{The next 700 programming languages}},
url = {http://dl.acm.org/citation.cfm?id=365257 )},
volume = {9},
year = {1966}
}
@inproceedings{bhargavan2010modular,
author = {Bhargavan, K. and Fournet, C. and Gordon, A.D.},
booktitle = {ACM Sigplan Notices},
number = {1},
pages = {445--456},
publisher = {ACM},
title = {{Modular verification of security protocol code by typing}},
url = {http://dl.acm.org/citation.cfm?id=1707801.1706350},
volume = {45},
year = {2010}
}
@article{Haskell2012a,
author = {Biancuzzi, F and Warden, S},
doi = {10.1093/epirev/mxr031},
file = {:Users/edwin/Documents/Mendeley Desktop/Biancuzzi, Warden/Unknown/Biancuzzi, Warden - Unknown - Masterminds of Programming Chapter 8.pdf:pdf},
isbn = {9780596801670},
issn = {1478-6729},
pmid = {22215642},
title = {{Masterminds of Programming Chapter 8}}
}
@book{Brady2012,
author = {Hunt, Andrew and Thomas, David},
booktitle = {Carcinogenesis},
doi = {10.1093/carcin/bgs054},
file = {:Users/edwin/Documents/Mendeley Desktop/Hunt, Thomas/Carcinogenesis/Hunt, Thomas - Unknown - The Pragmatic Programmer Chapter 5.pdf:pdf},
isbn = {020161622X},
issn = {1460-2180},
number = {3},
pmid = {22383472},
title = {{The Pragmatic Programmer Chapter 5}},
url = {http://www.ncbi.nlm.nih.gov/pubmed/22383472},
volume = {33}
}
@article{McBride2007,
author = {McBride, Conor and Paterson, Ross},
file = {:Users/edwin/Documents/Mendeley Desktop/McBride, Paterson/Journal of functional programming/McBride, Paterson - 2007 - Applicative programming with effects.pdf:pdf},
journal = {Journal of functional programming},
title = {{Applicative programming with effects}},
url = {http://journals.cambridge.org/abstract_S0956796807006326},
year = {2007}
}
@inproceedings{Altenkirch2010,
abstract = {The recent success of languages like Agda and Coq demonstrates the potential of using dependent types for programming. These systems rely on many high-level features like datatype definitions, pattern matching and implicit arguments to facilitate the use of the languages. However, these features complicate the metatheoretical study and are a potential source of bugs. To address these issues we introduce $\Pi$$\Sigma$, a dependently typed core language. It is small enough for metatheoretical study and the type checker is small enough to be formally verified. In this language there is only one mechanism for recursionused for types, functions and infinite objectsand an explicit mechanism to control unfolding, based on lifted types. Furthermore structural equality is used consistently for values and types; this is achieved by a new notion of $\alpha$-equality for recursive definitions. We show, by translating several high-level constructions, that $\Pi$$\Sigma$ is suitable as a core language for dependently typed programming.},
author = {Altenkirch, Thorsten and Danielsson, Nils Anders and L\"{o}h, Andres and Oury, Nicolas},
booktitle = {{FLOPS 2010}},
doi = {10.1007/978-3-642-12251-4_5},
editor = {Blume, Matthias and Kobayashi, Naoki and Vidal, Germ\'{a}n},
file = {:Users/edwin/Documents/Mendeley Desktop/Altenkirch et al/{FLOPS 2010}/Altenkirch et al. - 2010 - Dependent Types without the Sugar.pdf:pdf},
isbn = {9783642122507},
pages = {40----55},
publisher = {Springer Berlin Heidelberg},
series = {Lecture Notes in Computer Science},
title = {{Dependent Types without the Sugar}},
url = {http://www.springerlink.com/index/91W712G2806R575H.pdf},
year = {2010}
}
@article{McBride2005,
author = {McBride, Conor},
editor = {Vene, Varmo and Uustalu, Tarmo},
isbn = {3540285407},
journal = {Advanced Functional Programming},
keywords = {Dependent Types},
mendeley-tags = {Dependent Types},
pages = {130--170},
publisher = {Springer},
series = {Lecture Notes in Computer Science},
title = {{Epigram: Practical programming with dependent types}},
url = {http://www.springerlink.com/index/96j7v5vn8tyebeky.pdf},
volume = {3622},
year = {2005}
}
@article{Huet1997,
author = {Huet, G},
file = {:Users/edwin/Documents/Mendeley Desktop/Huet/{Journal of Functional Programming}/Huet - 1997 - The zipper.pdf:pdf},
journal = {{Journal of Functional Programming}},
number = {5},
pages = {549----554},
title = {{The zipper}},
url = {http://journals.cambridge.org/abstract_S0956796897002864},
volume = {7},
year = {1997}
}
@inproceedings{Gregoire2005,
author = {Gregoire, Benjamin and Mahboubi, Assia},
booktitle = {{Theorem Proving in Higher Order Logics (TPHOLS 2005)}},
file = {:Users/edwin/Documents/Mendeley Desktop/Gregoire, Mahboubi/{Theorem Proving in Higher Order Logics (TPHOLS 2005)}/Gregoire, Mahboubi - 2005 - Proving Equalities in a Commutative Ring Done Right in Coq.pdf:pdf},
pages = {98----113},
title = {{Proving Equalities in a Commutative Ring Done Right in Coq}},
url = {http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.61.3041},
year = {2005}
}
@misc{Bloat,
author = {Brooks, Fred},
file = {:Users/edwin/Documents/Mendeley Desktop/Brooks/Unknown/Brooks - Unknown - The Design of Design Chapter 4.pdf:pdf},
isbn = {9780321702081},
title = {{The Design of Design Chapter 4}}
}
@misc{Protocols2012a,
author = {Anderson, Ross},
doi = {10.1093/epirev/mxr031},
file = {:Users/edwin/Documents/Mendeley Desktop/Anderson/Unknown/Anderson - Unknown - Security Engineering Chapter 3.pdf:pdf},
isbn = {9780470068526},
issn = {1478-6729},
pmid = {22215642},
title = {{Security Engineering Chapter 3}}
}
@inproceedings{Augustsson1998,
abstract = {Cayenne is a Haskell-like language. The main difference between Haskell and Cayenne is that Cayenne has dependent types, i.e., the result type of a function may depend on the argument value , and types of record components (which can be types or values) may depend on other components. Cayenne also combines the syntactic categories for value expressions and type expressions; thus reducing the number of language concepts. Having dependent types and combined type and value expressions makes the language very powerful. It is powerful enough that a special module concept is unnecessary; ordinary records suffice. It is also powerful enough to encode predicate logic at the type level, allowing types to be used as specifications of programs. However, this power comes at a cost: type checking of Cayenne is undecidable. While this may appear to be a steep price to pay, it seems to work well in practice.},
author = {Augustsson, Lennart},
booktitle = {International Conference on Functional Programming},
doi = {10.1097/MEG.0b013e328342f213},
file = {:Users/edwin/Documents/Mendeley Desktop/Augustsson/International Conference on Functional Programming/Augustsson - 1998 - Cayenne - a language with dependent types.pdf:pdf},
issn = {14735687},
keywords = {Depe,Dependent Types},
mendeley-tags = {Depe,Dependent Types},
number = {1},
pages = {239--250},
pmid = {21139473},
publisher = {ACM Press},
title = {{Cayenne - a language with dependent types}},
url = {http://www.cs.chalmers.se/$\sim$augustss/cayenne/paper.ps},
volume = {23},
year = {1998}
}
@book{Hunt,
author = {Hunt, Andrew and Thomas, David},
booktitle = {Design},
file = {:Users/edwin/Documents/Mendeley Desktop/Hunt, Thomas/Design/Hunt, Thomas - Unknown - The Pragmatic Programmer Chapter 4.pdf:pdf},
isbn = {020161622X},
title = {{The Pragmatic Programmer Chapter 4}}
}
@article{burrows1990,
author = {Burrows, Michael and Abadi, Martin and Needham, Roger},
file = {:Users/edwin/Documents/Mendeley Desktop/Burrows, Abadi, Needham/ACM Transactions on Computer Systems/Burrows, Abadi, Needham - 1990 - A logic of authentication.pdf:pdf},
journal = {ACM Transactions on Computer Systems},
pages = {18----36},
title = {{A logic of authentication}},
url = {http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.115.3569},
volume = {8},
year = {1990}
}
@inproceedings{atkey2009unembedding,
author = {Atkey, R. and Lindley, S. and Yallop, J.},
booktitle = {Proceedings of the 2nd ACM SIGPLAN symposium on Haskell},
pages = {37--48},
publisher = {ACM},
title = {{Unembedding domain-specific languages}},
url = {http://dl.acm.org/citation.cfm?id=1596644},
year = {2009}
}
@inproceedings{Brady2011a,
address = {New York, New York, USA},
author = {Brady, Edwin},
booktitle = {Proceedings of the 5th {ACM} workshop on Programming languages meets program verification - {PLPV} '11},
doi = {10.1145/1929529.1929536},
file = {:Users/edwin/Documents/Mendeley Desktop/Brady/Proceedings of the 5th {ACM} workshop on Programming languages meets program verification - {PLPV} '11/Brady - 2011 - Idris --- Systems Programming Meets Full Dependent Types.pdf:pdf},
isbn = {9781450304870},
keywords = {Dependent Types,data description,dependent types},
mendeley-tags = {Dependent Types},
month = jan,
publisher = {ACM Press},
title = {{Idris --- Systems Programming Meets Full Dependent Types}},
url = {http://dl.acm.org/citation.cfm?id=1929529.1929536},
year = {2011}
}
@inproceedings{gibbons2011modularising,
author = {Gibbons, J. and Ko, H.S. and Others},
file = {:Users/edwin/Documents/Mendeley Desktop/Ko, Gibbons/Proceedings of the seventh ACM SIGPLAN workshop on Generic programming/Ko, Gibbons - 2011 - Modularising inductive families.pdf:pdf},
title = {{Modularising inductive families}},
url = {http://www.cs.ox.ac.uk/publications/publication5008-abstract.html},
year = {2011}
}
@book{An2012,
author = {Fowler, Martin},
booktitle = {Carcinogenesis},
doi = {10.1093/carcin/bgs054},
file = {:Users/edwin/Documents/Mendeley Desktop/Fowler/Carcinogenesis/Fowler - Unknown - Domain Specific Languages Chapter 1.pdf:pdf},
isbn = {9780132107549},
issn = {1460-2180},
number = {3},
pmid = {22383472},
title = {{Domain Specific Languages Chapter 1}},
url = {http://www.ncbi.nlm.nih.gov/pubmed/22383472},
volume = {33}
}
@inproceedings{coquand1986analysis,
author = {Coquand, T.},
booktitle = {{Proceedings of the First IEEE Symposium on Logic in Computer Science}},
file = {:Users/edwin/Documents/Mendeley Desktop/Coquand/{Proceedings of the First IEEE Symposium on Logic in Computer Science}/Coquand - 1986 - An analysis of Girard's paradox.pdf:pdf},
pages = {227----246},
title = {{An analysis of Girard's paradox}},
url = {http://hal.inria.fr/docs/00/07/60/23/PDF/RR-0531.pdf},
year = {1986}
}
@misc{altenkirch2008nÏƒ,
author = {Altenkirch, T. and Oury, N.},
file = {:Users/edwin/Documents/Mendeley Desktop/Altenkirch, Oury/Unknown/Altenkirch, Oury - 2008 - $Pi$$Sigma$ A Core Language for Dependently Typed Programming.pdf:pdf},
title = {{$\Pi$$\Sigma$: A Core Language for Dependently Typed Programming}},
url = {http://verse.aasemoon.com/images/6/6f/PiSigma.pdf},
year = {2008}
}
@inproceedings{barras2008implicit,
author = {Barras, B. and Bernardo, B.},
booktitle = {Foundations of Software Science and Computational Structures},
file = {:Users/edwin/Documents/Mendeley Desktop/Barras, Bernardo/Foundations of Software Science and Computational Structures/Barras, Bernardo - 2008 - The implicit calculus of constructions as a programming language with dependent types.pdf:pdf},
pages = {365--379},
publisher = {Springer},
title = {{The implicit calculus of constructions as a programming language with dependent types}},
url = {http://www.springerlink.com/index/m84h82904546l265.pdf},
year = {2008}
}
@book{While2012,
author = {Hunt, Andrew and Thomas, David},
booktitle = {Carcinogenesis},
doi = {10.1093/carcin/bgs054},
file = {:Users/edwin/Documents/Mendeley Desktop/Hunt, Thomas/Carcinogenesis/Hunt, Thomas - Unknown - The Pragmatic Programmer Chapter 6.pdf:pdf},
isbn = {020161622X},
issn = {1460-2180},
number = {3},
pmid = {22383472},
title = {{The Pragmatic Programmer Chapter 6}},
url = {http://www.ncbi.nlm.nih.gov/pubmed/22383472},
volume = {33}
}
@inproceedings{bradyresource,
author = {Brady, Edwin and Hammond, Kevin},
booktitle = {Practical Applications of Declarative Languages ({PADL} 2012)},
file = {:Users/edwin/Documents/Mendeley Desktop/Brady, Hammond/Practical Applications of Declarative Languages ({PADL} 2012)/Brady, Hammond - 2012 - Resource-safe Systems Programming with Embedded Domain Specific Languages.pdf:pdf},
pages = {242----257},
title = {{Resource-safe Systems Programming with Embedded Domain Specific Languages}},
url = {http://www.cs.st-andrews.ac.uk/$\sim$eb/drafts/dsl-idris.pdf},
year = {2012}
}
@book{luo1994,
author = {Luo, Z.},
publisher = {Oxford University Press, Inc.},
title = {{Computation and reasoning: a type theory for computer science}},
url = {http://dl.acm.org/citation.cfm?id=SERIES9893.184757},
year = {1994}
}
@phdthesis{norell2007thesis,
author = {Norell, Ulf},
file = {:Users/edwin/Documents/Mendeley Desktop/Norell/Unknown/Norell - 2007 - Towards a practical programming language based on dependent type theory.pdf:pdf},
keywords = {Dependent Types},
mendeley-tags = {Dependent Types},
publisher = {Citeseer},
school = {Chalmers University of Technology},
title = {{Towards a practical programming language based on dependent type theory}},
url = {http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.65.7934&amp;rep=rep1&amp;type=pdf},
year = {2007}
}
@inproceedings{Brady2006b,
author = {Brady, Edwin},
booktitle = {Implementation and Application of Functional Languages ({IFL}'06)},
file = {:Users/edwin/Documents/Mendeley Desktop/Brady/Implementation and Application of Functional Languages ({IFL}'06)/Brady - 2006 - Ivor, a proof engine.pdf:pdf},
isbn = {978-3-540-74129-9},
month = sep,
pages = {145----162},
title = {{Ivor, a proof engine}},
url = {http://dl.acm.org/citation.cfm?id=1757028.1757037},
year = {2006}
}
@inproceedings{chlipala2010ur,
author = {Chlipala, Adam},
booktitle = {ACM SIGPLAN Notices},
file = {:Users/edwin/Documents/Mendeley Desktop/Chlipala/ACM SIGPLAN Notices/Chlipala - 2010 - Ur statically-typed metaprogramming with type-level record computation.pdf:pdf},
number = {6},
pages = {122--133},
publisher = {ACM},
title = {{Ur: statically-typed metaprogramming with type-level record computation}},
url = {http://dl.acm.org/citation.cfm?id=1806612},
volume = {45},
year = {2010}
}
@misc{Abadi1997,
author = {Abadi, Martin and Gordon, Andrew D},
booktitle = {4TH ACM CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY},
file = {:Users/edwin/Documents/Mendeley Desktop/Abadi, Gordon/4TH ACM CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY/Abadi, Gordon - 1997 - A calculus for cryptographic protocols The spi calculus.pdf:pdf},
pages = {36 -- 47},
title = {{A calculus for cryptographic protocols: The spi calculus}},
url = {http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.49.2176},
year = {1997}
}
@inproceedings{McBride2006,
author = {McBride, C and Goguen, H and McKinna, J},
booktitle = {Types for Proofs and Programs {(TYPES 2006)}},
title = {{A few constructions on constructors}},
url = {http://www.springerlink.com/index/P4863U0M41396254.pdf},
year = {2006}
}
@article{Jones2003,
abstract = {Haskell is the world's leading lazy functional programming language and is widely used in teaching, research, and applications. The language continues to develop rapidly, but in 1998 the programming community decided to capture a stable snapshot of the language by introducing Haskell 98. This book constitutes the agreed definition of Haskell 98, the language itself as well as its supporting libraries, and should be a standard reference work for anyone involved in research, teaching, or applications. All Haskell compilers support Haskell 98, so professioanls and educators have a stable base for their work.},
author = {Jones, Simon Peyton},
editor = {Jones, Simon Peyton},
isbn = {0521826144},
journal = {Language},
number = {1},
publisher = {Cambridge University Press},
title = {{Haskell 98 Language and Libraries The Revised Report}},
url = {http://www.amazon.ca/exec/obidos/redirect?tag=citeulike09-20&amp;path=ASIN/0521826144},
volume = {13},
year = {2003}
}
@inproceedings{Visser2008,
author = {Visser, E},
booktitle = {Generative and Transformational Techniques in Software Engineering},
title = {{WebDSL: A case study in domain-specific language engineering}},
url = {http://www.springerlink.com/index/A3213003X6268032.pdf},
year = {2008}
}
@inproceedings{ko2011modularising,
author = {Ko, H.S. and Gibbons, J.},
booktitle = {Proceedings of the seventh ACM SIGPLAN workshop on Generic programming},
pages = {13--24},
publisher = {ACM},
title = {{Modularising inductive families}},
url = {http://dl.acm.org/citation.cfm?id=2036921},
year = {2011}
}
@misc{Attacks2012a,
author = {Anderson, Ross},
doi = {10.1093/epirev/mxr031},
file = {:Users/edwin/Documents/Mendeley Desktop/Anderson/Unknown/Anderson - Unknown - Security Engineering Chapter 18.pdf:pdf},
isbn = {9780470068526},
issn = {1478-6729},
number = {1},
pages = {NP},
pmid = {22215642},
title = {{Security Engineering Chapter 18}},
volume = {34}
}
@inproceedings{l,
author = {L\"{a}mmel, R. and Jones, S.P.},
booktitle = {ACM SIGPLAN Notices},
file = {:Users/edwin/Documents/Mendeley Desktop/L\"{a}mmel, Jones/ACM SIGPLAN Notices/L\"{a}mmel, Jones - 2003 - Scrap your boilerplate a practical design pattern for generic programming.pdf:pdf},
number = {3},
pages = {26--37},
publisher = {ACM},
title = {{Scrap your boilerplate: a practical design pattern for generic programming}},
url = {http://dl.acm.org/citation.cfm?id=640136.604179},
volume = {38},
year = {2003}
}
@inproceedings{Delahaye2000,
author = {Delahaye, D},
booktitle = {Logic for Programming and Automated Reasoning},
file = {:Users/edwin/Documents/Mendeley Desktop/Delahaye/Logic for Programming and Automated Reasoning/Delahaye - 2000 - A tactic language for the system Coq.pdf:pdf;:Users/edwin/Documents/Mendeley Desktop/Delahaye/Logic for Programming and Automated Reasoning/Delahaye - 2000 - A tactic language for the system Coq(2).pdf:pdf},
pages = {85----95},
publisher = {Springer},
title = {{A tactic language for the system Coq}},
url = {http://www.springerlink.com/index/EFQAH8J88K42VN8T.pdf},
year = {2000}
}
@misc{pollack1997believe,
author = {Pollack, R.},
file = {:Users/edwin/Documents/Mendeley Desktop/Pollack/Unknown/Pollack - 1997 - How to believe a machine-checked proof.pdf:pdf},
title = {{How to believe a machine-checked proof}},
url = {http://books.google.co.uk/books?hl=en&amp;lr=&amp;id=pLnKggT_In4C&amp;oi=fnd&amp;pg=PA205&amp;dq=how+to+believe+a+machine+checked+proof&amp;ots=c2OI8krqqA&amp;sig=EF3QonGFVdOpYdKO1KmW6ljCkjY},
year = {1997}
}
@book{Bertot2004,
author = {Bertot, Yves and Cast\'{e}ran, Pierre},
publisher = {Springer},
title = {{Interactive theorem proving and program development: {Coq'Art}: the {Calculus of Inductive Constructions}}},
url = {http://books.google.co.uk/books?hl=en&amp;lr=&amp;id=m5w5PRj5Nj4C&amp;oi=fnd&amp;pg=PA1&amp;dq=coq+theorem+prover&amp;ots=VHny1IYV0h&amp;sig=-K0FC67cdkhMDkAocFla8cZyRT4},
year = {2004}
}
@inproceedings{brady2011epic,
author = {Brady, Edwin},
booktitle = {Trends in Functional Programming ({TFP}â€™11)},
file = {:Users/edwin/Documents/Mendeley Desktop/Brady/Trends in Functional Programming ({TFP}â€™11)/Brady - 2011 - Epic --- A Library for Generating Compilers.pdf:pdf},
title = {{Epic --- A Library for Generating Compilers}},
url = {http://scholar.google.co.uk/scholar?cites=2588300990390214449&as_sdt=2005&sciodt=0,5&hl=en#1},
year = {2011}
}
@article{dybjer1994inductive,
author = {Dybjer, P.},
journal = {Formal aspects of computing},
number = {4},
pages = {440--465},
publisher = {Springer},
title = {{Inductive families}},
url = {http://www.springerlink.com/index/J17824H467X6J288.pdf},
volume = {6},
year = {1994}
}
@inproceedings{McBride2004b,
author = {McBride, Conor and McKinna, James},
booktitle = {Haskell Workshop},
file = {:Users/edwin/Documents/Mendeley Desktop/McBride, McKinna/Haskell Workshop/McBride, McKinna - 2004 - I am not a number I am a free variable.pdf:pdf},
title = {{I am not a number : I am a free variable}},
year = {2004}
}
@article{Wadler2001,
abstract = {The use of monads to structure functional programs is described. Monads provide a convenient framework for simulating effects found in other languages, such as global state, exception handling, output, or non-determinism. Three case studies are looked at in detail: how monads ease the modification of a simple evaluator; how monads act as the basis of a datatype of arrays subject to in-place update; and how monads can be used to build parsers.},
author = {Wadler, Philip},
doi = {10.1007/3-540-59451-5_2},
editor = {Jeuring, Johan and Meijer, Erik},
file = {:Users/edwin/Documents/Mendeley Desktop/Wadler/Advanced Functional Programming/Wadler - 2001 - Monads for functional programming.pdf:pdf},
isbn = {3540594515},
issn = {03029743},
journal = {Advanced Functional Programming},
number = {August 1992},
pages = {24--52},
publisher = {Springer},
series = {Lecture Notes in Computer Science},
title = {{Monads for functional programming}},
url = {http://www.springerlink.com/index/715264614rh13340.pdf},
volume = {925},
year = {2001}
}
@inproceedings{taha1997multi,
author = {Taha, W. and Sheard, T.},
booktitle = {ACM SIGPLAN Notices},
number = {12},
pages = {203--217},
publisher = {ACM},
title = {{Multi-stage programming with explicit annotations}},
url = {http://dl.acm.org/citation.cfm?id=259019},
volume = {32},
year = {1997}
}
@article{loh2010tutorial,
author = {L\"{o}h, A. and McBride, C. and Swierstra, W.},
file = {:Users/edwin/Documents/Mendeley Desktop/L\"{o}h, McBride, Swierstra/Fundamenta Informaticae/L\"{o}h, McBride, Swierstra - 2010 - A tutorial implementation of a dependently typed lambda calculus.pdf:pdf},
journal = {Fundamenta Informaticae},
number = {2},
pages = {177--207},
publisher = {IOS Press},
title = {{A tutorial implementation of a dependently typed lambda calculus}},
url = {http://iospress.metapress.com/index/976W4716TM79M6U8.pdf},
volume = {102},
year = {2010}
}
@book{Philosophy2012,
author = {Hunt, Andrew and Thomas, David},
booktitle = {Carcinogenesis},
doi = {10.1093/carcin/bgs054},
file = {:Users/edwin/Documents/Mendeley Desktop/Hunt, Thomas/Carcinogenesis/Hunt, Thomas - Unknown - The Pragmatic Programmer Chapter 1.pdf:pdf},
isbn = {020161622X},
issn = {1460-2180},
number = {3},
pmid = {22383472},
title = {{The Pragmatic Programmer Chapter 1}},
url = {http://www.ncbi.nlm.nih.gov/pubmed/22383472},
volume = {33}
}
@inproceedings{pollack1990implicit,
author = {Pollack, R.},
booktitle = {{Informal Proceedings of First Workshop on Logical Frameworks, Antibes}},
file = {:Users/edwin/Documents/Mendeley Desktop/Pollack/{Informal Proceedings of First Workshop on Logical Frameworks, Antibes}/Pollack - 1990 - Implicit syntax.pdf:pdf},
publisher = {Citeseer},
title = {{Implicit syntax}},
url = {http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.30.7361&amp;rep=rep1&amp;type=pdf},
year = {1990}
}
@article{gordon2003authenticity,
author = {Gordon, A.D. and Jeffrey, A.},
file = {:Users/edwin/Documents/Mendeley Desktop/Gordon, Jeffrey/Journal of computer security/Gordon, Jeffrey - 2003 - Authenticity by typing for security protocols.pdf:pdf},
journal = {Journal of computer security},
number = {4},
pages = {451--520},
publisher = {IOS Press},
title = {{Authenticity by typing for security protocols}},
url = {http://iospress.metapress.com/index/BHQQUFRA1C7W8TLY.pdf},
volume = {11},
year = {2003}
}
@inproceedings{Wadler1989,
abstract = {From the type of a polymorphic function we can derive a theorem that it satisfies. Every function of the same type satisfies the same theorem. This provides a free source of useful theorems, courtesy of Reynolds' abstraction theorem for the polymorphic lambda calculus.},
author = {Wadler, Philip},
booktitle = {Proceedings of the fourth international conference on Functional programming languages and computer architecture},
doi = {10.1145/99370.99404},
file = {:Users/edwin/Documents/Mendeley Desktop/Wadler/Proceedings of the fourth international conference on Functional programming languages and computer architecture/Wadler - 1989 - Theorems for free!.pdf:pdf},
isbn = {0897913280},
number = {June},
pages = {347--359},
publisher = {ACM},
series = {FPCA '89},
title = {{Theorems for free!}},
url = {http://portal.acm.org/citation.cfm?id=99404},
year = {1989}
}
@inproceedings{Augustsson1985,
address = {Berlin, Heidelberg},
author = {Augustsson, Lennart},
booktitle = {Functional Programming Languages and Computer Architecture},
doi = {10.1007/3-540-15975-4},
editor = {Jouannaud, Jean-Pierre},
isbn = {978-3-540-15975-9},
keywords = {Computer Science},
pages = {368----381},
publisher = {Springer Berlin Heidelberg},
series = {Lecture Notes in Computer Science},
title = {{Compiling Pattern Matching}},
url = {http://www.springerlink.com/content/y647423656557505/},
volume = {201},
year = {1985}
}
@inproceedings{Brady2005a,
author = {Brady, E and Hammond, K},
booktitle = {Implementation and Application of Functional \ldots},
file = {:Users/edwin/Documents/Mendeley Desktop/Brady, Hammond/Implementation and Application of Functional \ldots/Brady, Hammond - 2005 - A dependently typed framework for static analysis of program execution costs.pdf:pdf},
keywords = {Dependent Types},
mendeley-tags = {Dependent Types},
title = {{A dependently typed framework for static analysis of program execution costs}},
url = {http://www.springerlink.com/index/P446P2HH70107759.pdf},
year = {2005}
}
@article{Vytiniotis2011,
author = {Vytiniotis, Dimitrios and {Peyton Jones}, Simon and Schrijvers, Tom and Sulzmann, Martin},
file = {:Users/edwin/Documents/Mendeley Desktop/Vytiniotis et al/{Journal of Functional Programming}/Vytiniotis et al. - 2011 - textsc{OutsideIn}(X) Modular type inference with local assumptions(2).pdf:pdf;:Users/edwin/Documents/Mendeley Desktop/Vytiniotis et al/{Journal of Functional Programming}/Vytiniotis et al. - 2011 - textsc{OutsideIn}(X) Modular type inference with local assumptions.pdf:pdf},
journal = {{Journal of Functional Programming}},
number = {4--5},
pages = {333----412},
title = {{\textsc{OutsideIn}(X) Modular type inference with local assumptions}},
url = {http://journals.cambridge.org/abstract_S0956796811000098},
volume = {21},
year = {2011}
}
@article{mccann2000packet,
author = {McCann, P.J. and Chandra, S.},
journal = {ACM SIGCOMM Computer Communication Review},
number = {4},
pages = {321--333},
publisher = {ACM},
title = {{Packet types: abstract specification of network protocol messages}},
url = {http://dl.acm.org/citation.cfm?id=347563},
volume = {30},
year = {2000}
}
@article{Miller1992,
author = {Miller, Dale},
file = {:Users/edwin/Documents/Mendeley Desktop/Miller/Journal of Symbolic Computation/Miller - 1992 - Unification under a mixed prefix.pdf:pdf},
journal = {Journal of Symbolic Computation},
title = {{Unification under a mixed prefix}},
url = {http://www.sciencedirect.com/science/article/pii/074771719290011R},
year = {1992}
}
@inproceedings{norell2009dependently,
author = {Norell, Ulf},
booktitle = {Advanced Functional Programming},
file = {:Users/edwin/Documents/Mendeley Desktop/Norell/Advanced Functional Programming/Norell - 2009 - Dependently typed programming in Agda.pdf:pdf},
keywords = {Dependent Types},
mendeley-tags = {Dependent Types},
pages = {230--266},
publisher = {Springer},
title = {{Dependently typed programming in Agda}},
url = {http://www.springerlink.com/index/8X0H38858233VN26.pdf},
year = {2009}
}
@article{Hughes1989,
abstract = {As software becomes more and more complex, it is more and more important to structure it well. Well-structured software is easy to write, easy to debug, and provides a collection of modules that can be re-used to reduce future programming costs. Conventional languages place conceptual limits on the way problems can be modularised. Functional languages push those limits back. In this paper we show that two features of functional languages in particular, higher-order functions and lazy evaluation, can contribute greatly to modularity. As examples, we manipulate lists and trees, program several numerical algorithms, and implement the alpha-beta heuristic (an algorithm from Artificial Intelligence used in game-playing programs). Since modularity is the key to successful programming, functional languages are vitally important to the real world.},
author = {Hughes, J},
chapter = {2},
doi = {10.1093/comjnl/32.2.98},
editor = {Turner, David A},
file = {:Users/edwin/Documents/Mendeley Desktop/Hughes/The Computer Journal/Hughes - 1989 - Why Functional Programming Matters.pdf:pdf},
institution = {Programming Methodology Group, University of {G\"{o}teborg} and Chalmers Institute of Technology, Sweden},
isbn = {0201172364},
issn = {00104620},
journal = {The Computer Journal},
number = {2},
pages = {98--107},
publisher = {Br Computer Soc},
title = {{Why Functional Programming Matters}},
url = {http://comjnl.oupjournals.org/cgi/doi/10.1093/comjnl/32.2.98},
volume = {32},
year = {1989}
}
@article{Steiner1988,
author = {Steiner, JG},
file = {:Users/edwin/Documents/Mendeley Desktop/Steiner/Proc. Winter USENIX Conference/Steiner - 1988 - Kerberos An authentication service for open network systems.pdf:pdf},
journal = {Proc. Winter USENIX Conference},
title = {{Kerberos: An authentication service for open network systems}},
url = {http://www.cse.nd.edu/$\sim$dthain/courses/cse598z/fall2004/papers/kerberos.pdf},
year = {1988}
}
@phdthesis{McBride1999,
author = {McBride, Conor},
file = {:Users/edwin/Documents/Mendeley Desktop/McBride/Unknown/McBride - 1999 - Dependently typed functional programs and their proofs.pdf:pdf},
keywords = {Dependent Types},
mendeley-tags = {Dependent Types},
school = {University of Edinburgh},
title = {{Dependently typed functional programs and their proofs}},
url = {http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.26.4785&rep=rep1&type=pdf},
year = {1999}
}
@inproceedings{augustsson1999exercise,
author = {Augustsson, L. and Carlsson, M.},
booktitle = {In Workshop on Dependent Types in Programming, Gothenburg},
keywords = {Depe},
mendeley-tags = {Depe},
publisher = {Citeseer},
title = {{An exercise in dependent types: A well-typed interpreter}},
url = {http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.39.2895},
year = {1999}
}
@inproceedings{taha2004gentle,
author = {Taha, W.},
booktitle = {Domain-Specific Program Generation},
pages = {30--50},
publisher = {Springer},
title = {{A gentle introduction to multi-stage programming}},
url = {http://www.springerlink.com/index/JEMT0D8VYN5JB2L8.pdf},
year = {2004}
}
@inproceedings{Sculthorpe2009,
author = {Sculthorpe, Neil and Nilsson, Henrik},
booktitle = {International Conference on Functional Programming ({ICFP} '09)},
file = {:Users/edwin/Documents/Mendeley Desktop/Sculthorpe, Nilsson/International Conference on Functional Programming ({ICFP} '09)/Sculthorpe, Nilsson - 2009 - Safe functional reactive programming through dependent types.pdf:pdf;:Users/edwin/Documents/Mendeley Desktop/Sculthorpe, Nilsson/International Conference on Functional Programming ({ICFP} '09)/Sculthorpe, Nilsson - 2009 - Safe functional reactive programming through dependent types(2).pdf:pdf},
title = {{Safe functional reactive programming through dependent types}},
url = {http://dl.acm.org/citation.cfm?id=1596558},
year = {2009}
}
@misc{TheMendeleySupportTeam2011a,
abstract = {A quick introduction to Mendeley. Learn how Mendeley creates your personal digital library, how to organize and annotate documents, how to collaborate and share with colleagues, and how to generate citations and bibliographies.},
address = {London},
author = {{The Mendeley Support Team}},
booktitle = {Mendeley Desktop},
file = {:Users/edwin/Documents/Mendeley Desktop/The Mendeley Support Team/Mendeley Desktop/The Mendeley Support Team - 2011 - Getting Started with Mendeley.pdf:pdf},
keywords = {Mendeley,how-to,user manual},
pages = {1--16},
publisher = {Mendeley Ltd.},
title = {{Getting Started with Mendeley}},
url = {http://www.mendeley.com},
year = {2011}
}
@article{danielsson2011parsing,
author = {Danielsson, N. and Norell, U.},
journal = {Implementation and Application of Functional Languages},
pages = {80--99},
publisher = {Springer},
title = {{Parsing mixfix operators}},
url = {http://www.springerlink.com/index/386243257W504252.pdf},
year = {2011}
}
@misc{dagand2011transporting,
author = {Dagand, Pierre-Evariste and McBride, Conor},
file = {:Users/edwin/Documents/Mendeley Desktop/Dagand, McBride/Unknown/Dagand, McBride - 2011 - Transporting Functions across Ornaments.pdf:pdf},
title = {{Transporting Functions across Ornaments}},
url = {http://personal.cis.strath.ac.uk/$\sim$dagand/stuffs/paper-2011-patch/paper.pdf},
year = {2011}
}
@book{Fowler,
author = {Fowler, Martin},
booktitle = {Language},
file = {:Users/edwin/Documents/Mendeley Desktop/Fowler/Language/Fowler - Unknown - Domain Specific Languages Chapter 2.pdf:pdf},
isbn = {9780132107549},
title = {{Domain Specific Languages Chapter 2}}
}
@misc{Bove2008,
abstract = {In these lecture notes we give an introduction to functional programming with dependent types. We use the dependently typed programming language Agda which is based on ideas in Martin-L\"{o}f type theory and Martin-L\"{o}fs logical framework. We begin by showing how to do simply typed functional programming, and discuss the differences between Agdas type system and the Hindley-Milner type system, which underlies mainstream typed functional programming languages like Haskell and ML. We then show how to employ dependent types for programming with functional data structures such as vectors and binary search trees. We go on to explain the Curry-Howard identification of propositions and types, and how it makes Agda not only a programming language but also a programming logic. According to Curry-Howard, we also identify programs and proofs, something which is possible only by requiring that all program terminate. However, we show in the final section a method for encoding general and possibly partial recursive functions as total functions using dependent types.},
author = {Bove, Ana and Dybjer, Peter},
booktitle = {Notes},
doi = {10.1007/978-3-642-03153-3_2},
file = {:Users/edwin/Documents/Mendeley Desktop/Bove, Dybjer/Notes/Bove, Dybjer - 2008 - Dependent Types at Work.pdf:pdf},
number = {February},
pages = {57--99},
publisher = {Springer},
title = {{Dependent Types at Work}},
url = {http://www.springerlink.com/index/1039q8qk71257677.pdf},
volume = {5520},
year = {2008}
}
@article{Okasaki1993,
author = {Okasaki, Chris},
file = {:Users/edwin/Documents/Mendeley Desktop/Okasaki/Journal of functional programming/Okasaki - 1993 - Red-Black Trees in A Functional Setting.pdf:pdf},
journal = {Journal of functional programming},
title = {{Red-Black Trees in A Functional Setting}},
year = {1993}
}
@inproceedings{pj2006gadts,
author = {{Peyton Jones}, S. and Vytiniotis, D. and Weirich, S. and Washburn, G.},
booktitle = {{International Conference on Functional Programming} ({ICFP} '06)},
file = {:Users/edwin/Documents/Mendeley Desktop/Peyton Jones et al/{International Conference on Functional Programming} ({ICFP} '06)/Peyton Jones et al. - 2006 - Simple unification-based type inference for GADTs.pdf:pdf},
number = {9},
pages = {50--61},
publisher = {ACM},
title = {{Simple unification-based type inference for GADTs}},
url = {http://dl.acm.org/citation.cfm?id=1159811},
volume = {41},
year = {2006}
}
@misc{altenkirch2005dependent,
author = {Altenkirch, T. and McBride, C. and McKinna, J.},
booktitle = {Manuscript, available online},
file = {:Users/edwin/Documents/Mendeley Desktop/Altenkirch, McBride, McKinna/Manuscript, available online/Altenkirch, McBride, McKinna - 2005 - Why dependent types matter.pdf:pdf},
title = {{Why dependent types matter}},
url = {http://www.cs.nott.ac.uk/$\sim$txa/talks/splst11.pdf},
year = {2005}
}
@misc{The2012c,
author = {Robbins, A and Hannah, E and Lamb, L},
doi = {10.1093/epirev/mxr031},
file = {:Users/edwin/Documents/Mendeley Desktop/Robbins, Hannah, Lamb/Unknown/Robbins, Hannah, Lamb - Unknown - Learning the vi and Vim Editors.pdf:pdf},
isbn = {9780596529833},
issn = {1478-6729},
pmid = {22215642},
title = {{Learning the vi and Vim Editors}}
}
@misc{Resolution2012a,
author = {Fall, Kevin R and Stevens, W. Richard},
doi = {10.1093/epirev/mxr031},
file = {:Users/edwin/Documents/Mendeley Desktop/Fall, Stevens/Unknown/Fall, Stevens - Unknown - TCPIP Illustrated Volume 1 Chapter 11.pdf:pdf},
issn = {1478-6729},
pmid = {22215642},
title = {{TCP/IP Illustrated Volume 1 Chapter 11}}
}
@article{Brady2006a,
author = {Brady, E and Hammond, K},
file = {:Users/edwin/Documents/Mendeley Desktop/Brady, Hammond/\ldots of the 5th international conference on \ldots/Brady, Hammond - 2006 - A verified staged interpreter is a verified compiler.pdf:pdf},
journal = {\ldots  of the 5th international conference on  \ldots},
keywords = {Dependent Types},
mendeley-tags = {Dependent Types},
title = {{A verified staged interpreter is a verified compiler}},
url = {http://portal.acm.org/citation.cfm?id=1173706.1173724},
year = {2006}
}
@inproceedings{swierstra2007beauty,
author = {Swierstra, W. and Altenkirch, T.},
booktitle = {Proceedings of the ACM SIGPLAN workshop on Haskell workshop},
file = {:Users/edwin/Documents/Mendeley Desktop/Swierstra, Altenkirch/Proceedings of the ACM SIGPLAN workshop on Haskell workshop/Swierstra, Altenkirch - 2007 - Beauty in the beast.pdf:pdf},
pages = {25--36},
publisher = {ACM},
title = {{Beauty in the beast}},
url = {http://dl.acm.org/citation.cfm?id=1291206},
year = {2007}
}
@article{McBride2004a,
abstract = {ABSTRACT Pattern matching has proved an extremely powerful and durable notion in functional programming. This paper contributes a new programming notation for type theory which elaborates the notion in various ways. First, as is by now quite well-known in the type theory community, definition by pattern matching becomes a more discriminating tool in the presence of dependent types, since it refines the explanation of types as well as values. This becomes all the more true in the presence of the rich class of datatypes known as inductive families (Dybjer, 1991). Secondly, as proposed by Peyton Jones (1997) for Haskell, and independently rediscovered by us, subsidiary case analyses on the results of intermediate computations, which commonly take place on the right-hand side of definitions by pattern matching, should rather be handled on the left. In simply-typed languages, this subsumes the trivial case of Boolean guards; in our setting it becomes yet more powerful. Thirdly, elementary pattern matching decompositions have a well-defined interface given by a dependent type; they correspond to the statement of an induction principle for the datatype. More general, user-definable decompositions may be defined which also have types of the same general form. Elementary pattern matching may therefore be recast in abstract form, with a semantics given by translation. Such abstract decompositions of data generalize Wadler&apos;s (1987) notion of &lsquo;view&rsquo;. The programmer wishing to introduce a new view of a type mathitT, and exploit it directly in pattern matching, may do so via a standard programming idiom. The type theorist, looking through the Curry&ndash;Howard lens, may see this as proving a theorem, one which establishes the validity of a new induction principle for mathitT. We develop enough syntax and semantics to account for this high-level style of programming in dependent type theory. We close with the development of a typechecker for the simply-typed lambda calculus, which furnishes a view of raw terms as either being well-typed, or containing an error. The implementation of this view is ipso facto a proof that typechecking is decidable.},
author = {McBride, Conor and McKinna, James},
doi = {10.1017/S0956796803004829},
file = {:Users/edwin/Documents/Mendeley Desktop/McBride, McKinna/Journal of Functional Programming/McBride, McKinna - 2004 - The view from the left.pdf:pdf},
issn = {09567968},
journal = {Journal of Functional Programming},
keywords = {Dependent Types},
mendeley-tags = {Dependent Types},
number = {1},
pages = {69--111},
publisher = {Cambridge University Press},
title = {{The view from the left}},
url = {http://www.journals.cambridge.org/abstract_S0956796803004829},
volume = {14},
year = {2004}
}
@misc{Nodes2012a,
author = {Brooks, Fred},
doi = {10.1093/epirev/mxr031},
file = {:Users/edwin/Documents/Mendeley Desktop/Brooks/Unknown/Brooks - Unknown - The Design of Design Chapter 3.pdf:pdf},
isbn = {9780321702081},
issn = {1478-6729},
pmid = {22215642},
title = {{The Design of Design Chapter 3}}
}
@inproceedings{Hancock2000,
author = {Hancock, Peter and Setzer, Anton},
booktitle = {{Proceedings of the 14th Annual Conference of the EACSL on Computer Science Logic}},
file = {:Users/edwin/Documents/Mendeley Desktop/Hancock, Setzer/{Proceedings of the 14th Annual Conference of the EACSL on Computer Science Logic}/Hancock, Setzer - 2000 - Interactive Programs in Dependent Type Theory.pdf:pdf},
isbn = {3-540-67895-6},
month = aug,
pages = {317--331},
title = {{Interactive Programs in Dependent Type Theory}},
url = {http://dl.acm.org/citation.cfm?id=647850.737221},
year = {2000}
}
@inproceedings{augustsson2008paradise,
author = {Augustsson, L. and Mansell, H. and Sittampalam, G.},
booktitle = {International Conference on Functional Programming},
file = {:Users/edwin/Documents/Mendeley Desktop/Augustsson, Mansell, Sittampalam/International Conference on Functional Programming/Augustsson, Mansell, Sittampalam - 2008 - Paradise a two-stage DSL embedded in Haskell.pdf:pdf},
number = {9},
pages = {225--228},
publisher = {ACM},
title = {{Paradise: a two-stage DSL embedded in Haskell}},
url = {http://dl.acm.org/citation.cfm?id=1411203.1411236},
volume = {43},
year = {2008}
}
@misc{Abel1998,
author = {Abel, Andreas},
booktitle = {Language},
file = {:Users/edwin/Documents/Mendeley Desktop/Abel/Language/Abel - 1998 - foetus - Termination Checker for Simple Functional Programs.pdf:pdf},
title = {{foetus - Termination Checker for Simple Functional Programs}},
year = {1998}
}
@article{Jones1999,
abstract = {Haskell benefits from a sophisticated type system, but implementors, programmers, and researchers suffer because it has no formal description. To remedy this shortcoming, we present a Haskell program that implements a Haskell typechecker, thus providing a mathematically rigorous specification in a notation that is familiar to Haskell users. We expect this program to fill a serious gap in current descriptions of Haskell, both as a starting point for discussions about existing features of the type system, and as a platform from which to explore new proposals.},
author = {Jones, Mark P},
journal = {October},
publisher = {Citeseer},
title = {{Typing Haskell in Haskell}},
url = {http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.134.7274&amp;rep=rep1&amp;type=pdf},
year = {1999}
}
@inproceedings{morris2006exploring,
author = {Morris, P. and Altenkirch, T. and McBride, C.},
booktitle = {Types for Proofs and Programs},
file = {:Users/edwin/Documents/Mendeley Desktop/Morris, Altenkirch, McBride/Types for Proofs and Programs/Morris, Altenkirch, McBride - 2006 - Exploring the regular tree types.pdf:pdf},
pages = {252--267},
publisher = {Springer},
title = {{Exploring the regular tree types}},
url = {http://www.springerlink.com/index/f9p1317716614834.pdf},
year = {2006}
}
@inproceedings{Sheard2005,
address = {New York, New York, USA},
author = {Sheard, Tim},
booktitle = {Proceedings of the 2005 ACM SIGPLAN workshop on Haskell - Haskell '05},
doi = {10.1145/1088348.1088356},
file = {:Users/edwin/Documents/Mendeley Desktop/Sheard/Proceedings of the 2005 ACM SIGPLAN workshop on Haskell - Haskell '05/Sheard - 2005 - Putting curry-howard to work.pdf:pdf},
isbn = {159593071X},
keywords = {GADT,curry-howard isomorphism,extensional kind system,haskell,logic},
month = sep,
pages = {74--85},
publisher = {ACM Press},
title = {{Putting curry-howard to work}},
url = {http://dl.acm.org/citation.cfm?id=1088348.1088356},
year = {2005}
}
@misc{Interface2012a,
author = {Kreibich, Jay A.},
doi = {10.1093/epirev/mxr031},
file = {:Users/edwin/Documents/Mendeley Desktop/Kreibich/Unknown/Kreibich - Unknown - Using SQLite Chapter 7.pdf:pdf},
isbn = {9781449394592},
issn = {1478-6729},
pmid = {22215642},
title = {{Using SQLite Chapter 7}}
}
@book{The2012,
author = {Hunt, Andrew and Thomas, David},
booktitle = {Carcinogenesis},
doi = {10.1093/carcin/bgs054},
file = {:Users/edwin/Documents/Mendeley Desktop/Hunt, Thomas/Carcinogenesis/Hunt, Thomas - Unknown - The Pragmatic Programmer Chapter 3.pdf:pdf},
isbn = {020161622X},
issn = {1460-2180},
number = {3},
pmid = {22383472},
title = {{The Pragmatic Programmer Chapter 3}},
url = {http://www.ncbi.nlm.nih.gov/pubmed/22383472},
volume = {33}
}
@misc{Brady2012b,
author = {Brooks, Fred},
doi = {10.1093/epirev/mxr031},
file = {:Users/edwin/Documents/Mendeley Desktop/Brooks/Unknown/Brooks - Unknown - The Design of Design Chapter 2.pdf:pdf},
isbn = {9780321702081},
issn = {1478-6729},
pmid = {22215642},
title = {{The Design of Design Chapter 2}}
}
@inproceedings{Levitation2010,
author = {Chapman, James and Dagand, Pierre-Evariste and McBride, Conor and Morris, Peter},
booktitle = {{15th ACM SIGPLAN International Conference on Functional programming (ICFP '10)}},
doi = {10.1145/1932681.1863547},
file = {:Users/edwin/Documents/Mendeley Desktop/Chapman et al/{15th ACM SIGPLAN International Conference on Functional programming (ICFP '10)}/Chapman et al. - 2010 - The gentle art of levitation.pdf:pdf},
isbn = {978-1-60558-794-3},
issn = {03621340},
keywords = {Dependent Types,data structure,metaprogramming,monads,proof assistants,type systems},
mendeley-tags = {Dependent Types},
month = sep,
number = {9},
title = {{The gentle art of levitation}},
url = {http://dl.acm.org/citation.cfm?id=1932681.1863547},
volume = {45},
year = {2010}
}
@inproceedings{Xi1999,
abstract = {Note: OCR errors may be found in this Reference List extracted from the full text article. ACM has opted to expose the complete List rather than only correct and linked references.},
author = {Xi, Hongwei and Pfenning, Frank},
booktitle = {Proceedings of the 26th ACM SIGPLANSIGACT symposium on Principles of programming languages POPL 99},
doi = {10.1145/292540.292560},
file = {:Users/edwin/Documents/Mendeley Desktop/Xi, Pfenning/Proceedings of the 26th ACM SIGPLANSIGACT symposium on Principles of programming languages POPL 99/Xi, Pfenning - 1999 - Dependent types in practical programming.pdf:pdf},
isbn = {1581130953},
issn = {07439016},
keywords = {Dependent Types},
mendeley-tags = {Dependent Types},
organization = {Carnegie Mellon University},
pages = {214--227},
publisher = {ACM Press},
series = {POPL '99},
title = {{Dependent types in practical programming}},
url = {http://portal.acm.org/citation.cfm?doid=292540.292560},
volume = {26},
year = {1999}
}
@inproceedings{Brady2003,
author = {Brady, Edwin and McBride, Conor and McKinna, James},
booktitle = {Types for Proofs and Programs {(TYPES 2003)}},
file = {:Users/edwin/Documents/Mendeley Desktop/Brady, McBride, McKinna/Types for Proofs and Programs {(TYPES 2003)}/Brady, McBride, McKinna - 2003 - Inductive families need not store their indices.pdf:pdf},
keywords = {Dependent Types},
mendeley-tags = {Dependent Types},
title = {{Inductive families need not store their indices}},
url = {http://www.springerlink.com/index/WBXJJG717N2W3NU2.pdf},
year = {2003}
}
@inproceedings{fisher2005pads,
author = {Fisher, K. and Gruber, R.},
booktitle = {ACM SIGPLAN Notices},
number = {6},
pages = {295--304},
publisher = {ACM},
title = {{PADS: a domain-specific language for processing ad hoc data}},
url = {http://dl.acm.org/citation.cfm?id=1065046},
volume = {40},
year = {2005}
}
